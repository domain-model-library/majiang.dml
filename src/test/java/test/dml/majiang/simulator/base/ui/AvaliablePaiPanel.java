/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package test.dml.majiang.simulator.base.ui;

import dml.majiang.core.entity.Pai;
import test.dml.majiang.simulator.base.entity.MahjongTileSceneEnum;
import test.dml.majiang.simulator.base.entity.PlayStateEnum;

import java.util.List;

/**
 * @author DELL
 */
public class AvaliablePaiPanel extends javax.swing.JPanel {

    /**
     * Creates new form AvaliablePaiPanel
     */
    public AvaliablePaiPanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 2, 2));
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    public void showAvaliablePai(List<Pai> avaliablePai, PlayStateEnum playState) {
        removeAll();
        for (Pai pai : avaliablePai) {
            MahjongTile paiTile = new MahjongTile(pai, playState, MahjongTileSceneEnum.availablePai, false);
            add(paiTile);
        }
        revalidate();
        repaint();
    }

    public void updateAllPaiNotSelected() {
        for (int i = 0; i < getComponentCount(); i++) {
            MahjongTile paiTile = (MahjongTile) getComponent(i);
            paiTile.updateNotSelected();
        }
        revalidate();
        repaint();
    }

    public void updateSelectFirstPai(int paiId) {
        for (int i = 0; i < getComponentCount(); i++) {
            MahjongTile paiTile = (MahjongTile) getComponent(i);
            if (paiTile.getPaiId() == paiId) {
                paiTile.updateSelect();
            } else {
                paiTile.updateNotSelected();
            }
        }
        revalidate();
        repaint();
    }

    public void updateFirstPaiSelected(int paiId) {
        for (int i = 0; i < getComponentCount(); i++) {
            MahjongTile paiTile = (MahjongTile) getComponent(i);
            if (paiTile.getPaiId() == paiId) {
                paiTile.updateSelected();
            } else {
                paiTile.updateNotSelected();
            }
        }
        revalidate();
        repaint();
    }

    public void updateSelectSecondPai(int firstPaiId, int secondPaiId) {
        for (int i = 0; i < getComponentCount(); i++) {
            MahjongTile paiTile = (MahjongTile) getComponent(i);
            if (paiTile.getPaiId() == firstPaiId) {
                paiTile.updateSelected();
            } else if (paiTile.getPaiId() == secondPaiId) {
                paiTile.updateSelectSecond();
            } else {
                paiTile.updateNotSelected();
            }
        }
        revalidate();
        repaint();
    }
}
