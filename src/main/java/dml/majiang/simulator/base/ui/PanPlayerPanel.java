/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package dml.majiang.simulator.base.ui;

import dml.majiang.core.entity.Pai;
import dml.majiang.core.entity.PanPlayer;
import dml.majiang.core.entity.action.PanPlayerAction;
import dml.majiang.core.entity.action.chi.ChiAction;
import dml.majiang.core.entity.action.da.DaAction;
import dml.majiang.core.entity.action.gang.GangAction;
import dml.majiang.core.entity.action.guo.GuoAction;
import dml.majiang.core.entity.action.hu.HuAction;
import dml.majiang.core.entity.action.mo.MoAction;
import dml.majiang.core.entity.action.peng.PengAction;
import dml.majiang.core.entity.chupaizu.ChichuPaiZu;
import dml.majiang.core.entity.chupaizu.GangchuPaiZu;
import dml.majiang.core.entity.chupaizu.PengchuPaiZu;
import dml.majiang.core.entity.fenzu.Gangzi;
import dml.majiang.core.entity.fenzu.Kezi;
import dml.majiang.core.entity.fenzu.Shunzi;
import dml.majiang.simulator.base.controller.Controller;
import dml.majiang.simulator.base.entity.MahjongTileSceneEnum;
import dml.majiang.simulator.base.entity.PlayStateEnum;

import javax.swing.*;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

/**
 * @author DELL
 */
public class PanPlayerPanel extends javax.swing.JPanel {

    /**
     * Creates new form PanPlayerPanel
     */
    public PanPlayerPanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ownpaiPanel = new javax.swing.JPanel();
        gangmopaiPanel = new javax.swing.JPanel();
        gangmopaiLabel = new javax.swing.JLabel();
        tileContainerPanel = new javax.swing.JPanel();
        oprationPanel = new javax.swing.JPanel();
        dapaiPanel = new javax.swing.JPanel();

        ownpaiPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 2, 2));

        gangmopaiPanel.setLayout(new java.awt.BorderLayout());

        gangmopaiLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        gangmopaiLabel.setText("刚摸牌");
        gangmopaiPanel.add(gangmopaiLabel, java.awt.BorderLayout.PAGE_START);
        gangmopaiPanel.add(tileContainerPanel, java.awt.BorderLayout.CENTER);

        dapaiPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 1, 1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addComponent(ownpaiPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 453, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(gangmopaiPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 47, Short.MAX_VALUE))
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(oprationPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(dapaiPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addContainerGap())
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(gangmopaiPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 59, Short.MAX_VALUE)
                                        .addComponent(ownpaiPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(oprationPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(dapaiPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(40, 40, 40))
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel dapaiPanel;
    private javax.swing.JLabel gangmopaiLabel;
    private javax.swing.JPanel gangmopaiPanel;
    private javax.swing.JPanel oprationPanel;
    private javax.swing.JPanel ownpaiPanel;
    private javax.swing.JPanel tileContainerPanel;

    // End of variables declaration//GEN-END:variables
    public void updateAllPaiNotSelected() {
        for (int i = 0; i < ownpaiPanel.getComponentCount(); i++) {
            MahjongTile paiTile = (MahjongTile) ownpaiPanel.getComponent(i);
            paiTile.updateNotSelected();
        }
    }

    public void updateSelectFirstPai(int paiId) {
        for (int i = 0; i < ownpaiPanel.getComponentCount(); i++) {
            MahjongTile paiTile = (MahjongTile) ownpaiPanel.getComponent(i);
            if (paiTile.getPaiId() == paiId) {
                paiTile.updateSelect();
            } else {
                paiTile.updateNotSelected();
            }
        }
    }

    public void updateFirstPaiSelected(int paiId) {
        for (int i = 0; i < ownpaiPanel.getComponentCount(); i++) {
            MahjongTile paiTile = (MahjongTile) ownpaiPanel.getComponent(i);
            if (paiTile.getPaiId() == paiId) {
                paiTile.updateSelected();
            } else {
                paiTile.updateNotSelected();
            }
        }
    }

    public void updateSelectSecondPai(int firstPaiId, int secondPaiId) {
        for (int i = 0; i < ownpaiPanel.getComponentCount(); i++) {
            MahjongTile paiTile = (MahjongTile) ownpaiPanel.getComponent(i);
            if (paiTile.getPaiId() == firstPaiId) {
                paiTile.updateSelected();
            } else if (paiTile.getPaiId() == secondPaiId) {
                paiTile.updateSelected();
            } else {
                paiTile.updateNotSelected();
            }
        }
    }

    public void showPanPlayer(PanPlayer player, PlayStateEnum playState) {
        if (player == null) {
            return;
        }
        ownpaiPanel.removeAll();
        tileContainerPanel.removeAll();
        oprationPanel.removeAll();
        dapaiPanel.removeAll();

        List<ChichuPaiZu> chichupaiZuList = player.getChichupaiZuList();
        for (ChichuPaiZu chichuPaiZu : chichupaiZuList) {
            Shunzi shunzi = chichuPaiZu.getShunzi();
            JPanel shunziPanel = new JPanel(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 1, 1));
            shunziPanel.add(new MahjongTile(shunzi.getPai1(), playState, MahjongTileSceneEnum.chuPaiZu, false));
            shunziPanel.add(new MahjongTile(shunzi.getPai2(), playState, MahjongTileSceneEnum.chuPaiZu, false));
            shunziPanel.add(new MahjongTile(shunzi.getPai3(), playState, MahjongTileSceneEnum.chuPaiZu, false));
            ownpaiPanel.add(shunziPanel);
        }

        List<PengchuPaiZu> pengchuPaiZuList = player.getPengchupaiZuList();
        for (PengchuPaiZu pengchuPaiZu : pengchuPaiZuList) {
            Kezi kezi = pengchuPaiZu.getKezi();
            JPanel keziPanel = new JPanel(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 1, 1));
            keziPanel.add(new MahjongTile(kezi.getPai1(), playState, MahjongTileSceneEnum.chuPaiZu, false));
            keziPanel.add(new MahjongTile(kezi.getPai2(), playState, MahjongTileSceneEnum.chuPaiZu, false));
            keziPanel.add(new MahjongTile(kezi.getPai3(), playState, MahjongTileSceneEnum.chuPaiZu, false));
            ownpaiPanel.add(keziPanel);
        }

        List<GangchuPaiZu> gangchuPaiZuList = player.getGangchupaiZuList();
        for (GangchuPaiZu gangchuPaiZu : gangchuPaiZuList) {
            Gangzi gangzi = gangchuPaiZu.getGangzi();
            JPanel gangziPanel = new JPanel(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 1, 1));
            gangziPanel.add(new MahjongTile(gangzi.getPai1(), playState, MahjongTileSceneEnum.chuPaiZu, false));
            gangziPanel.add(new MahjongTile(gangzi.getPai2(), playState, MahjongTileSceneEnum.chuPaiZu, false));
            gangziPanel.add(new MahjongTile(gangzi.getPai3(), playState, MahjongTileSceneEnum.chuPaiZu, false));
            gangziPanel.add(new MahjongTile(gangzi.getPai4(), playState, MahjongTileSceneEnum.chuPaiZu, false));
            ownpaiPanel.add(gangziPanel);
        }

        List<Pai> shoupaiList = player.getFangruShoupaiList();
        shoupaiList.sort((pai1, pai2) -> {
            if (pai1.getPaiType().ordinal() == pai2.getPaiType().ordinal()) {
                return pai1.getId() - pai2.getId();
            } else {
                return pai1.getPaiType().ordinal() - pai2.getPaiType().ordinal();
            }
        });

        List<PanPlayerAction> actionList = player.getActionList();
        Set<Integer> canDaPaiIdSet = new HashSet<>();
        for (PanPlayerAction action : actionList) {
            if (action instanceof DaAction) {
                DaAction daAction = (DaAction) action;
                canDaPaiIdSet.add(daAction.getPaiId());
            }
        }
        for (Pai pai : shoupaiList) {
            MahjongTile tile = new MahjongTile(pai, playState, MahjongTileSceneEnum.shouPai, canDaPaiIdSet.contains(pai.getId()));
            ownpaiPanel.add(tile);
        }

        if (playState.equals(PlayStateEnum.shoupaiEditing)) {
            revalidate();
            repaint();
            return;
        }

        Pai gangmoShoupai = player.getGangmoShoupai();
        if (gangmoShoupai != null) {
            tileContainerPanel.add(new MahjongTile(gangmoShoupai, playState, MahjongTileSceneEnum.shouPai, canDaPaiIdSet.contains(gangmoShoupai.getId())));
        }

        MoAction moAction = player.findMoCandidateAction();
        if (moAction != null) {
            oprationPanel.add(new JLabel("双击摸牌"));
        }
        if (player.hasDaActionCandidate()) {
            oprationPanel.add(new JLabel("双击打牌"));
        }
        //给actionList按照actionId排序
        actionList.sort((action1, action2) -> {
            if (action1.getId() == action2.getId()) {
                return 0;
            } else if (action1.getId() < action2.getId()) {
                return -1;
            } else {
                return 1;
            }
        });
        for (PanPlayerAction action : actionList) {
            if (action instanceof ChiAction) {
                ChiAction chiAction = (ChiAction) action;
                JButton chiButton = new JButton("吃 " +
                        MahjongTile.paiChinese[chiAction.getShunzi().getPai1().getPaiType().ordinal()] +
                        MahjongTile.paiChinese[chiAction.getShunzi().getPai2().getPaiType().ordinal()] +
                        MahjongTile.paiChinese[chiAction.getShunzi().getPai3().getPaiType().ordinal()]);
                chiButton.addActionListener(e -> {
                    Controller.action(player.getId(), action.getId());
                });
                oprationPanel.add(chiButton);
            } else if (action instanceof PengAction) {
                PengAction pengAction = (PengAction) action;
                JButton pengButton = new JButton("碰");
                pengButton.addActionListener(e -> {
                    Controller.action(player.getId(), action.getId());
                });
                oprationPanel.add(pengButton);
            } else if (action instanceof GangAction) {
                GangAction gangAction = (GangAction) action;
                JButton gangButton = new JButton("杠");
                gangButton.addActionListener(e -> {
                    Controller.action(player.getId(), action.getId());
                });
                oprationPanel.add(gangButton);
            } else if (action instanceof HuAction) {
                HuAction huAction = (HuAction) action;
                JButton huButton = new JButton("胡");
                huButton.addActionListener(e -> {
                    Controller.action(player.getId(), action.getId());
                });
                oprationPanel.add(huButton);
            } else if (action instanceof GuoAction) {
                GuoAction guoAction = (GuoAction) action;
                JButton guoButton = new JButton("过");
                guoButton.addActionListener(e -> {
                    Controller.action(player.getId(), action.getId());
                });
                oprationPanel.add(guoButton);
            }
        }

        List<Pai> dachupaiList = player.getDachupaiList();
        for (Pai pai : dachupaiList) {
            MahjongTile tile = new MahjongTile(pai, playState, MahjongTileSceneEnum.chuPaiZu, false);
            dapaiPanel.add(tile);
        }

        revalidate();
        repaint();
    }
}
