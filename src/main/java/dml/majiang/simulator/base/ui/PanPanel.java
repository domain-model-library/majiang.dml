/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package dml.majiang.simulator.base.ui;

import dml.majiang.core.entity.MenFeng;
import dml.majiang.core.entity.Pai;
import dml.majiang.core.entity.Pan;
import dml.majiang.simulator.base.controller.Controller;
import dml.majiang.simulator.base.entity.*;

import java.util.List;

/**
 * @author DELL
 */
public class PanPanel extends javax.swing.JPanel {

    /**
     * Creates new form PanPanel
     */
    public PanPanel() {
        initComponents();
        Controller.setPanPanel(this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panPlayerPanelXi = new PanPlayerPanel();
        panPlayerPanelDong = new PanPlayerPanel();
        panPlayerPanelBei = new PanPlayerPanel();
        panPlayerPanelNan = new PanPlayerPanel();
        avaliablePaiPanel = new AvaliablePaiPanel();
        specialRuleStatePanel = new SpecialRuleStatePanel();

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(specialRuleStatePanel, javax.swing.GroupLayout.PREFERRED_SIZE, 337, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(162, 162, 162)
                                                .addComponent(panPlayerPanelXi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addComponent(panPlayerPanelBei, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(avaliablePaiPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 418, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(panPlayerPanelNan, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(230, 230, 230))))
                        .addGroup(layout.createSequentialGroup()
                                .addGap(511, 511, 511)
                                .addComponent(panPlayerPanelDong, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(specialRuleStatePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addComponent(panPlayerPanelXi, javax.swing.GroupLayout.PREFERRED_SIZE, 248, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(0, 0, Short.MAX_VALUE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(panPlayerPanelBei, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                        .addComponent(avaliablePaiPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 126, Short.MAX_VALUE)
                                        .addComponent(panPlayerPanelNan, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                                .addGap(18, 18, 18)
                                .addComponent(panPlayerPanelDong, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private AvaliablePaiPanel avaliablePaiPanel;
    private PanPlayerPanel panPlayerPanelBei;
    private PanPlayerPanel panPlayerPanelDong;
    private PanPlayerPanel panPlayerPanelNan;
    private PanPlayerPanel panPlayerPanelXi;
    private SpecialRuleStatePanel specialRuleStatePanel;
    // End of variables declaration//GEN-END:variables

    public void showPan(Pan pan, PlayStateEnum playState, List<String[]> panSpecialRulesStateView) {
        List<Pai> avaliablePai = pan.getAvaliablePaiList();
        avaliablePaiPanel.showAvaliablePai(avaliablePai, playState);
        panPlayerPanelDong.showPanPlayer(pan.findPlayerByMenFeng(MenFeng.dong), playState);
        panPlayerPanelNan.showPanPlayer(pan.findPlayerByMenFeng(MenFeng.nan), playState);
        panPlayerPanelXi.showPanPlayer(pan.findPlayerByMenFeng(MenFeng.xi), playState);
        panPlayerPanelBei.showPanPlayer(pan.findPlayerByMenFeng(MenFeng.bei), playState);
        specialRuleStatePanel.showSpecialRuleState(panSpecialRulesStateView);
    }

    public void updateForPaiExchange(PaiExchangeState paiExchangeState) {
        if (paiExchangeState instanceof InitalPaiExchangeState) {
            avaliablePaiPanel.updateAllPaiNotSelected();
            panPlayerPanelDong.updateAllPaiNotSelected();
            panPlayerPanelNan.updateAllPaiNotSelected();
            panPlayerPanelXi.updateAllPaiNotSelected();
            panPlayerPanelBei.updateAllPaiNotSelected();
        } else if (paiExchangeState instanceof SelectFirstPai) {
            int selectedPaiId = ((SelectFirstPai) paiExchangeState).getSelectedPaiId();
            avaliablePaiPanel.updateSelectFirstPai(selectedPaiId);
            panPlayerPanelDong.updateSelectFirstPai(selectedPaiId);
            panPlayerPanelNan.updateSelectFirstPai(selectedPaiId);
            panPlayerPanelXi.updateSelectFirstPai(selectedPaiId);
            panPlayerPanelBei.updateSelectFirstPai(selectedPaiId);
        } else if (paiExchangeState instanceof FirstPaiSelected) {
            int selectedPaiId = ((FirstPaiSelected) paiExchangeState).getSelectedPaiId();
            avaliablePaiPanel.updateFirstPaiSelected(selectedPaiId);
            panPlayerPanelDong.updateFirstPaiSelected(selectedPaiId);
            panPlayerPanelNan.updateFirstPaiSelected(selectedPaiId);
            panPlayerPanelXi.updateFirstPaiSelected(selectedPaiId);
            panPlayerPanelBei.updateFirstPaiSelected(selectedPaiId);
        } else if (paiExchangeState instanceof FirstPaiSelectedAndExit) {
            int selectedPaiId = ((FirstPaiSelectedAndExit) paiExchangeState).getSelectedPaiId();
            avaliablePaiPanel.updateFirstPaiSelected(selectedPaiId);
            panPlayerPanelDong.updateFirstPaiSelected(selectedPaiId);
            panPlayerPanelNan.updateFirstPaiSelected(selectedPaiId);
            panPlayerPanelXi.updateFirstPaiSelected(selectedPaiId);
            panPlayerPanelBei.updateFirstPaiSelected(selectedPaiId);
        } else if (paiExchangeState instanceof SelectSecondPai) {
            int firstPaiId = ((SelectSecondPai) paiExchangeState).getFirstPaiId();
            int secondPaiId = ((SelectSecondPai) paiExchangeState).getSecondPaiId();
            avaliablePaiPanel.updateSelectSecondPai(firstPaiId, secondPaiId);
            panPlayerPanelDong.updateSelectSecondPai(firstPaiId, secondPaiId);
            panPlayerPanelNan.updateSelectSecondPai(firstPaiId, secondPaiId);
            panPlayerPanelXi.updateSelectSecondPai(firstPaiId, secondPaiId);
            panPlayerPanelBei.updateSelectSecondPai(firstPaiId, secondPaiId);
        } else {
        }
    }
}
